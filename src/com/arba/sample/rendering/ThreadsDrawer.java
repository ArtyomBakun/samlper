package com.arba.sample.rendering;import com.arba.sample.model.ThreadInfo;import com.arba.sample.util.AskJdkUtils;import com.arba.sample.util.RenderingUtils;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.scene.control.TableView;import java.util.ArrayList;import java.util.List;public class ThreadsDrawer extends Thread{    private Integer pid;    private TableView<ThreadInfo> threadsTable;    private ObservableList<ThreadInfo> threads = FXCollections.observableArrayList();    public ThreadsDrawer(TableView<ThreadInfo> threadsTable, Integer pid)    {        this.pid = pid;        this.threadsTable = threadsTable;    }    @Override    public void run()    {        parseCmdOutput();        threadsTable.setItems(threads);        RenderingUtils.refreshTableView(threadsTable);    }        private void parseCmdOutput(){        List<String> threadSample = new ArrayList<>();        boolean isSample = false;        for (String s : AskJdkUtils.getThreadsDumpForProcesses(pid))        {            isSample |= s.startsWith("\"");            if(isSample){                if(s.trim().equals("")){                    extractThreadInfo(threadSample);                    threadSample = new ArrayList<>();                    isSample = false;                    continue;                }                threadSample.add(s);            }        }    }        private void extractThreadInfo(List<String> stack){        String name = stack.get(0).split("\"")[1];        ThreadInfo threadInfo = threads.stream()                .filter(t -> name.equals(t.getName()))                .findFirst()                .orElseGet(ThreadInfo::new);        threadInfo.setName(name);        threadInfo.getState().add("RUNNABLE");        StringBuilder threadStack = new StringBuilder();        stack.forEach(threadStack::append);        threadInfo.getStacks().add(threadStack.toString());        threads.add(threadInfo);    }}